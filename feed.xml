<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="http://jekyllrb.com" version="3.4.3">Jekyll</generator>
  
  
  <link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2018-12-31T01:59:16+01:00</updated>
  <id>http://localhost:4000//</id>

  
    <title type="html">Personal blog</title>
  

  
    <subtitle>My personal web to describe my projects, ideas and motivations.
</subtitle>
  

  

  
  
    <entry>
      
      <title type="html">CRUD API Rest in Rust</title>
      
      <link href="http://localhost:4000/2018/12/08/crud-api-rest-in-rust/" rel="alternate" type="text/html" title="CRUD API Rest in Rust" />
      <published>2018-12-08T00:00:00+01:00</published>
      <updated>2018-12-08T00:00:00+01:00</updated>
      <id>http://localhost:4000/2018/12/08/crud-api-rest-in-rust</id>
      <content type="html" xml:base="http://localhost:4000/2018/12/08/crud-api-rest-in-rust/">&lt;h1 id=&quot;rest-service-in-rust&quot;&gt;REST Service in Rust&lt;/h1&gt;

&lt;p&gt;I started a boilerplate project for future web implementations in Rust. As far as I know the normal backend is &lt;a href=&quot;https//rocket.rs&quot;&gt;Rocket&lt;/a&gt; + &lt;a href=&quot;http://diesel.rs&quot;&gt;Diesel&lt;/a&gt;.  With this project I will be able to extend the boilerplate for future requirements, and if it is necessary include any type.&lt;/p&gt;

&lt;p&gt;It is a minimal example for a REST API service.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;db.rs&lt;/code&gt;  Database manager class&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;error.rs&lt;/code&gt; Class to manage error messages&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;main.rs&lt;/code&gt; Entry point which includes REST service&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;schema.rs&lt;/code&gt; Schema definition to connect with the database Postgres&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Original &lt;a href=&quot;https://github.com/carlosb1/examples-rust/tree/master/my_rocket_diesel_demo&quot;&gt;source code&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      

      

      

      
        <summary type="html">REST Service in Rust</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Dijkstra example</title>
      
      <link href="http://localhost:4000/2017/11/26/dijkstra-example/" rel="alternate" type="text/html" title="Dijkstra example" />
      <published>2017-11-26T00:00:00+01:00</published>
      <updated>2017-11-26T00:00:00+01:00</updated>
      <id>http://localhost:4000/2017/11/26/dijkstra-example</id>
      <content type="html" xml:base="http://localhost:4000/2017/11/26/dijkstra-example/">&lt;p&gt;I just finished an example in java 8 about an implementation of the&lt;br /&gt;
Dijkstra algorithm to build the shortest path.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosb1/c388f7949f61438286a19b69b9baf2ce.js&quot;&gt;&lt;/script&gt;</content>

      
      
      
      
      

      

      
        <category term="java" />
      
        <category term="java8" />
      

      

      
        <summary type="html">I just finished an example in java 8 about an implementation of the Dijkstra algorithm to build the shortest path.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Flyweight pattern</title>
      
      <link href="http://localhost:4000/2017/10/23/flyweight-pattern/" rel="alternate" type="text/html" title="Flyweight pattern" />
      <published>2017-10-23T00:59:05+02:00</published>
      <updated>2017-10-23T00:59:05+02:00</updated>
      <id>http://localhost:4000/2017/10/23/flyweight-pattern</id>
      <content type="html" xml:base="http://localhost:4000/2017/10/23/flyweight-pattern/">&lt;p&gt;Implementation of the flyweight pattern. It permits decoupling the changing data from the static data (value objects) in instances  to improve the performance in our design:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosb1/5433a096d33e285ba89a5856646bdb78.js&quot;&gt;&lt;/script&gt;</content>

      
      
      
      
      

      

      
        <category term="cpp" />
      

      

      
        <summary type="html">Implementation of the flyweight pattern. It permits decoupling the changing data from the static data (value objects) in instances to improve the performance in our design:</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Game of life kata in Rust</title>
      
      <link href="http://localhost:4000/2017/07/09/game-of-life-kata-in-rust/" rel="alternate" type="text/html" title="Game of life kata in Rust" />
      <published>2017-07-09T01:06:05+02:00</published>
      <updated>2017-07-09T01:06:05+02:00</updated>
      <id>http://localhost:4000/2017/07/09/game-of-life-kata-in-rust</id>
      <content type="html" xml:base="http://localhost:4000/2017/07/09/game-of-life-kata-in-rust/">&lt;p&gt;In my free time, I am learning rust. To improve, It is a good exercise to implement some katas in this language. In this
case I implemented the first part (without resurrections) of the Game of life:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosb1/b230a3b67537f2e7a3ebf8a323231f50.js&quot;&gt;&lt;/script&gt;</content>

      
      
      
      
      

      

      
        <category term="rust" />
      

      

      
        <summary type="html">In my free time, I am learning rust. To improve, It is a good exercise to implement some katas in this language. In this case I implemented the first part (without resurrections) of the Game of life:</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Skeleton scrapper python</title>
      
      <link href="http://localhost:4000/2017/07/02/skeleton-scrapper-python/" rel="alternate" type="text/html" title="Skeleton scrapper python" />
      <published>2017-07-02T01:06:05+02:00</published>
      <updated>2017-07-02T01:06:05+02:00</updated>
      <id>http://localhost:4000/2017/07/02/skeleton-scrapper-python</id>
      <content type="html" xml:base="http://localhost:4000/2017/07/02/skeleton-scrapper-python/">&lt;p&gt;I just finish to type an scrapper example. Now, it is very simple version, but it seems works fine and it include a good test coverage.&lt;/p&gt;

&lt;p&gt;My idea is add:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Multithreading to downloading webs&lt;/li&gt;
  &lt;li&gt;Adds a better data parser, to avoid noise data&lt;/li&gt;
  &lt;li&gt;Include some  page rank alg. to give more value some webs&lt;/li&gt;
  &lt;li&gt;Dockerize or add support for heroku:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here the link: &lt;a href=&quot;https://github.com/carlosb1/examples-python/blob/master/scrapers/example_scraper_news.py&quot;&gt;link&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="python" />
      

      

      
        <summary type="html">I just finish to type an scrapper example. Now, it is very simple version, but it seems works fine and it include a good test coverage.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Double checked problem for concurrency</title>
      
      <link href="http://localhost:4000/2017/04/25/double-checked-problem-for-concurrency/" rel="alternate" type="text/html" title="Double checked problem for concurrency" />
      <published>2017-04-25T00:00:00+02:00</published>
      <updated>2017-04-25T00:00:00+02:00</updated>
      <id>http://localhost:4000/2017/04/25/double-checked-problem-for-concurrency</id>
      <content type="html" xml:base="http://localhost:4000/2017/04/25/double-checked-problem-for-concurrency/">&lt;p&gt;This weekend, I read an article from Uncle Bob to optimise the access to thread-safe objects &lt;a href=&quot;https://app.box.com/s/t7kvebv4p8yiu5jfrr69ldujs7rqzdlw&quot;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The problem is explained with a Singleton pattern implemention (without smart pointers):&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosb1/98008c218aa3ec367d563e2932136b3c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The problem how to evaluate the critical section efficiently. For this, it is necessary take care our blocking threads are trying to access to the critical session
in a different time and ‘software state’ where in this state is possible has initialized our critical resource. The solution is:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosb1/1ecb788fa7bfae316c2cbd7f4054e64c.js&quot;&gt;&lt;/script&gt;</content>

      
      
      
      
      

      

      
        <category term="cpp" />
      

      

      
        <summary type="html">This weekend, I read an article from Uncle Bob to optimise the access to thread-safe objects link</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Recipe: Thread safe queue</title>
      
      <link href="http://localhost:4000/2017/04/22/recipe-thread-safe-queue/" rel="alternate" type="text/html" title="Recipe:  Thread safe queue" />
      <published>2017-04-22T01:06:05+02:00</published>
      <updated>2017-04-22T01:06:05+02:00</updated>
      <id>http://localhost:4000/2017/04/22/recipe-thread-safe-queue</id>
      <content type="html" xml:base="http://localhost:4000/2017/04/22/recipe-thread-safe-queue/">&lt;p&gt;The C++11 queue implementation is not thread safe… It is a common requeriment to have a concurrent access in a C++ queue, the most simple option is the implementation of a
decorator pattern and it adds two new operations to synchronize the access&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosb1/8b806b9b9bb2a6914ee7.js&quot;&gt;&lt;/script&gt;</content>

      
      
      
      
      

      

      
        <category term="cpp" />
      

      

      
        <summary type="html">The C++11 queue implementation is not thread safe… It is a common requeriment to have a concurrent access in a C++ queue, the most simple option is the implementation of a decorator pattern and it adds two new operations to synchronize the access</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Recipe: My VIM configuration</title>
      
      <link href="http://localhost:4000/2017/04/22/recipe-my-vim-configuration/" rel="alternate" type="text/html" title="Recipe: My VIM configuration" />
      <published>2017-04-22T01:06:05+02:00</published>
      <updated>2017-04-22T01:06:05+02:00</updated>
      <id>http://localhost:4000/2017/04/22/recipe-my-vim-configuration</id>
      <content type="html" xml:base="http://localhost:4000/2017/04/22/recipe-my-vim-configuration/">&lt;p&gt;Few years ago, I was trying to choose a IDE to work with C++ and Python, but any environment convinced me…. Finally, i configured me VIM editor with Vundle.. It works very well and simple.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosb1/b71924fc02a37ef27020.js&quot;&gt;&lt;/script&gt;</content>

      
      
      
      
      

      

      
        <category term="vim" />
      

      

      
        <summary type="html">Few years ago, I was trying to choose a IDE to work with C++ and Python, but any environment convinced me…. Finally, i configured me VIM editor with Vundle.. It works very well and simple.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Recipe: Active Object pattern for C++ part1</title>
      
      <link href="http://localhost:4000/2017/04/22/recipe-active-object-pattern-for-c-part1/" rel="alternate" type="text/html" title="Recipe: Active Object pattern for C++ part1" />
      <published>2017-04-22T01:06:05+02:00</published>
      <updated>2017-04-22T01:06:05+02:00</updated>
      <id>http://localhost:4000/2017/04/22/recipe-active-object-pattern-for-c-part1</id>
      <content type="html" xml:base="http://localhost:4000/2017/04/22/recipe-active-object-pattern-for-c-part1/">&lt;p&gt;It is the first solution for the active object pattern in C++11, it permits encapsulate the thread management in a different object.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosb1/6ca0ac91a4e0c74ba7b02702ec76d7bd.js&quot;&gt;&lt;/script&gt;</content>

      
      
      
      
      

      

      
        <category term="cpp" />
      

      

      
        <summary type="html">It is the first solution for the active object pattern in C++11, it permits encapsulate the thread management in a different object.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Kakuro Solver</title>
      
      <link href="http://localhost:4000/2017/04/22/kakuro-solver/" rel="alternate" type="text/html" title="Kakuro Solver" />
      <published>2017-04-22T01:06:05+02:00</published>
      <updated>2017-04-22T01:06:05+02:00</updated>
      <id>http://localhost:4000/2017/04/22/kakuro-solver</id>
      <content type="html" xml:base="http://localhost:4000/2017/04/22/kakuro-solver/">&lt;p&gt;These days, I decided to refresh my Python and algorithm knownledge. For this reason, I looked for some algorithms problems.. 
Finally, I liked one from Reddit, &lt;a href=&quot;https://www.reddit.com/r/dailyprogrammer/comments/3g2tby/20150807_challenge_226_hard_kakuro_solver/&quot;&gt;the kakuro problem&lt;/a&gt; and this is my solution.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosb1/898857e94bbbb9ae50ec.js&quot;&gt;&lt;/script&gt;</content>

      
      
      
      
      

      

      
        <category term="python" />
      

      

      
        <summary type="html">These days, I decided to refresh my Python and algorithm knownledge. For this reason, I looked for some algorithms problems.. Finally, I liked one from Reddit, the kakuro problem and this is my solution.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Challenge: Reader and writer problem</title>
      
      <link href="http://localhost:4000/2017/04/22/challenge-reader-and-writer-problem/" rel="alternate" type="text/html" title="Challenge: Reader and writer problem" />
      <published>2017-04-22T01:06:05+02:00</published>
      <updated>2017-04-22T01:06:05+02:00</updated>
      <id>http://localhost:4000/2017/04/22/challenge-reader-and-writer-problem</id>
      <content type="html" xml:base="http://localhost:4000/2017/04/22/challenge-reader-and-writer-problem/">&lt;p&gt;Solution for the reader and writer concurrency problem
&lt;script src=&quot;https://gist.github.com/carlosb1/8594319fec29679c39bae9a914cf6548.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="cpp" />
      

      

      
        <summary type="html">Solution for the reader and writer concurrency problem</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Challenge: Find all possible words from a random input of letters</title>
      
      <link href="http://localhost:4000/2017/04/22/challenge-find-all-possible-words-from-a-random-input-of-letters/" rel="alternate" type="text/html" title="Challenge: Find all possible words from a random input of letters" />
      <published>2017-04-22T01:06:05+02:00</published>
      <updated>2017-04-22T01:06:05+02:00</updated>
      <id>http://localhost:4000/2017/04/22/challenge-find-all-possible-words-from-a-random-input-of-letters</id>
      <content type="html" xml:base="http://localhost:4000/2017/04/22/challenge-find-all-possible-words-from-a-random-input-of-letters/">&lt;p&gt;Sometimes, I will try to practise my kungfu code with problems… This is an exercise to find all possible words from a random number of letters
&lt;script src=&quot;https://gist.github.com/carlosb1/4fd9cf09634ff07dff57e90d197c2bc5.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="python" />
      

      

      
        <summary type="html">Sometimes, I will try to practise my kungfu code with problems… This is an exercise to find all possible words from a random number of letters</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Presentation</title>
      
      <link href="http://localhost:4000/2017/04/21/welcome-to-jekyll/" rel="alternate" type="text/html" title="Presentation" />
      <published>2017-04-21T01:06:05+02:00</published>
      <updated>2017-04-21T01:06:05+02:00</updated>
      <id>http://localhost:4000/2017/04/21/welcome-to-jekyll</id>
      <content type="html" xml:base="http://localhost:4000/2017/04/21/welcome-to-jekyll/">&lt;p&gt;This is my blog. It is a journal to talk about all things which interested me, my hobbies and ideas.&lt;/p&gt;

&lt;p&gt;Carlos&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="presentation" />
      

      

      
        <summary type="html">This is my blog. It is a journal to talk about all things which interested me, my hobbies and ideas.</summary>
      

      
      
    </entry>
  
  
</feed>
